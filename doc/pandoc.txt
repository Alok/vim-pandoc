*vim-pandoc*                                           Last change: 04/11/2013 

|vim-pandoc| provides facilities to integrate Vim with the |pandoc| document
converter and work with documents written in |pandocs-markdown-variant|
variant (although textile documents are also supported). It is the main item
in |vim-pandoc-project|.

 *pandoc* 
    http://johnmacfarlane.net/pandoc/
 *pandoc-markdown-variant* 
    http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown
  *vim-pandoc-project*
    http://github.com/vim-pandoc

vim-pandoc's goals are

 1) to provide advanced integration with pandoc, 
 2) to offer a comfortable document writing environment,
 3) to allow great configurability.

CONTENTS 

- REQUIREMENTS |vim-pandoc-requirements|
- INSTALLATION |vim-pandoc-installation|
- SYNTAX |vim-pandoc-pandoc-syntax|
- MODULES |vim-pandoc-modules|
    - FORMATTING |vim-pandoc-formatting-module|
    - FOLDING |vim-pandoc-folding-module|
    - COMMAND |vim-pandoc-command-module|
      -- TEMPLATES |vim-pandoc-command-templates|
    - MENU |vim-pandoc-menu-module|
    - KEYBOARD |vim-pandoc-keyboard-module|
    - BIBLIOGRAPHIES |vim-pandoc-bibliographies-module|
    - COMPLETION |vim-pandoc-completion-module|
    - TOC |vim-pandoc-toc-module|
    - CHDIR |vim-pandoc-chdir-module|
- CONFIGURATION
    - SETTINGS |vim-pandoc-settings|


REQUIREMENTS			                      *vim-pandoc-requirements*
 
* Vim 7.4
  Note: On vim versions < 7.4, some modules are automatically disabled (see
  |g:pandoc#modules#disabled|, but vim-vim-pandoc is able to run in a degraded
  mode.
* python support.
  Note: If python is not available, the features that require it are
  automatically disabled, allowing vim-pandoc to run in a degraded mode.
  However, vim-pandoc uses the new python API, so in versions under 7.4,
  even if python is available, some functions might not.

To check if the requirements are satisfied, check if

    :echo v:version >= 704 && has("python")

outputs "1".

INSTALLATION                                          *vim-pandoc-installation*

The plugin follows the usual bundle structure, so it's easy to install it
using pathogen, Vundle or NeoBundle.

The most recent version is available at github. For those who need it, a
tarball is available from here.

- Using Vundle (recommended)

  Just add

    Plugin 'vim-pandoc/vim-pandoc'

  to your ~/.vimrc file and run :PluginInstall

NeoBundle users should replace `Plugin` in these instructions with
`NeoBundle`.

- Using Pathogen

    $ cd ~/.vim/bundle
    $ git clone git@github.com:vim-pandoc/vim-pandoc.git

- The repo is pathogen compatible and you can also just drop it in runtimepath.

SYNTAX                                            *vim-pandoc-pandoc-syntax*

vim-pandoc doesn't provide a syntax file for pandoc markdown files. Please
use https://github.com/vim-pandoc/vim-pandoc-syntax for this:

   Plugin 'vim-pandoc/vim-pandoc-syntax'

Note: this syntax file is used for both `markdown` and `pandoc` filetypes by
default, but you can opt out of it for markdown files by setting
|g:pandoc#filetypes#pandoc_markdown| to 0.

The reason we split the syntax file is it is much cleaner to track issues
separatedly. It also allows users not to use this syntax file if they want to
(notice that vim-pandoc-syntax is also configurable).

FILETYPES					          *vim-pandoc-filetypes*

vim-pandoc is not a regular filetype plugin. Although it does define a
`pandoc` filetype, vim-pandoc can also attach to other filestypes, like
`markdown`, `rst` and `textile`. In that case, vim-pandoc uses the
appropiate filetype syntax file, but creates the Pandoc command and loads the
extra utilities. What filetypes to attach to is determined by the value of the
|g:pandoc#filetypes#handled| variable.

Note: vim-pandoc's developers mostly use pandoc's markdown syntax, so
coverage for it is more complete than for the other filetypes.

MODULES                                                     *vim-pandoc-modules*

vim-pandoc is split in several modules. They can be enabled and disabled
independently at startup, by adjusting the values of the
|g:pandoc#modules#enabled| and |g:pandoc#modules#disabled| variables. 

For example, some people prefer not to use folds, so they would want to
disable the `folding` module, which creates folds for headers and some special
cases. To disable the module they should put

    let g:pandoc#modules#disabled = ["folding"]

in their .vimrc.

                                                       *vim-pandoc-modules-list*

Now, a description of the available modules

- FORMATTING                                      *vim-pandoc-formatting-module*

Handles basic writing settings, like the use of hard or soft line wraps. It is
recommended to leave this module enabled.

The module behavior is configured through the |g:pandoc#formatting#mode|
variable. For example, giving it the value 'ha' will enable hard breaks, and
autoformatting. The default is to use soft wraps.

This module also configures whether to use pandoc for |`equalprog`| or not.
See |g:pandoc#formatting#pandoc_equalprog|.

- FOLDING                                            *vim-pandoc-folding-module*

Provides folding support for markdown and textile files.

The initial |'foldlevel'| is set with |g:pandoc#folding#level|.

As expected, folds are created for headers in markdown and textile files. The
folding level for the headers can be defined by two methods, configurable with
|g:pandoc#folding#mode|. The default mode, "syntax", uses the header syntax to
determine the level. So

    ### this is level 3
    #### this is level 4
    ###### this is level 6
    #### this is level 4
    # this is level 1

The alternative mode, "relative", counts the number of parents the header has,
so

    ### this is level 1
    #### this is level 2
    ###### this is level 3
    #### this is level 2
    # this is level 1

Besides this, some extensions are provided:

* If present, fold the document's YAML frontmatter (this is configurable with
  |g:pandoc#folding#fold_yaml|)
* Fold divs of the classes defined in |g:pandoc#folding#fold_div_classes|. For
  example, you might want to create notes for a presentation. pandoc
  understands

    <div class="notes">
    this is an observation
    </div foldend>

  is a note and will suppress it from the slides. Now, you might want to hide
  those while preparing the slides, and that's where this feature comes in
  handy (the `folding` module folds divs of the `notes` class by default, you
  can disable that clearing g:pandoc#folding#fold_div_classes).
  Note: You must add the `foldend` attribute to the closing `div` tag,
  otherwise the folding levels can get messed up.
* Fold in custom marked comments. For example, this will fold

    <!-- Custom fold fold-begin -->
    blah blah blah...
    <!-- fold-end -->

  Note: This also works in textile files, with `.. fold-begin` and `..
  fold-end`.

- COMMAND                                            *vim-pandoc-command-module*

Note: This modules requires python support.

The `command` module sets up a buffer-local *:Pandoc* command which handles
pandoc execution. This command builds an incantation for pandoc using
vim-pandocs configuration and the current state of the buffer
(bibliographies found, etc.).

The syntax of the :Pandoc command is as follows:

    :Pandoc[!] OUTPUT-FORMAT ARGS

Where OUTPUT-FORMAT is the value you would normally pass to the -t option in
pandoc, and ARGS are auxiliary arguments you want to pass pandoc. For example,

    :Pandoc beamer -Vlang:spanish

will create an incantation like:
    
    pandoc -t beamer -Vlang:spanish -o file.pdf file.pdc

:Pandoc will also use the value of |b:pandoc_biblio_bibs| to pass
`--bibliography` arguments, so the user shouldn't do that himself.

Depending on the value of |g:pandoc#command#use_message_buffers|, once pandoc runs
a buffer will open displaying the command output. You can dismiss this buffer
pressing <Esc>.

If you write a bang ('!') after the command, vim-pandoc will try to open
the created file in its associated program. This behavior can be customized
through the |g:pandoc#command#custom_open| variable. 

Note: The pandoc execution is performed asynchronously if vim supports the
"clientserver" feature. This requires python to be available in the system.

The :Pandoc command has argument completion for supported output formats and
pandoc option arguments.

Note: Previously, vim-pandoc used the executors system present in
vim-pandoc, which allowed for the execution of command pipelines. This is no
longer supported. If you want to pass the file through a filter, use pandoc's
-F option.

-- TEMPLATES                                       *vim-pandoc-command-templates*

It might get tedious to reuse the same arguments over and over. For example,
the user might frequently execute

    :Pandoc! pdf -Vdocumentclass=memoir -Vdocumentclassoptions=article -Vmainfont='GFS Bodoni'

He can save this incantation as a 'template', so later he could simply run

    :Pandoc! #my_usual_article

Note: templates don't record if a bang was used for the Pandoc command, so once
#my_usual_article is defined, both ':Pandoc #my_usual_article' and ':Pandoc!
#my_usual_article' are possible.

                                                                *:PandocTemplate*
To save the latest :Pandoc incantation as a template, the user should execute

    :PandocTemplate save my_usual_article

It is also possible to save a custom incantation like this

    :PandocTemplate save fancy_article pdf -Vdocumentclass=memoir -Vmainfont='Helvetica Neue'

To review some template, use

    :PandocTemplate get my_usual_article

which should output the template definition.

- MENU                                                   *vim-pandoc-menu-module*

Creates a menu for pandoc handled files. If the `command` module is enabled,
you can build your documents from it.

- KEYBOARD                                           *vim-pandoc-keyboard-module*

Registers custom mappings for applying text styles, navigating the documents
and more. 

This is list of the mappings currently implemented (in brackets, the modes
where they are available):

- *<localleader>i*     toggles emphasis [vn]
- *<localleader>b*     toggles bold [vn]
- *<localleader>`*     toggles verbatim [vn]
- *<localleader>~~*    toggles strikeout [vn]
- *<localleader>^*     toggles superscript [vn]
- *<localleader>_*     toggles subscript [vn]
- *<localleader>#*     apply header (accepts a count) [n]
- *<localleader>hd*    remove header [n]
- *<localleader>hn*    move to next header [n]
- *<localleader>hb*    move to previous header [n]
- *<localleader>hh*    go to current header [n]
- *<localleader>hp*    go to current header's parent [n]
- *<localleader>hsn*   move to next sibling header [n]
- *<localleader>hsb*   move to previous sibling header [n]
- *<localleader>hcf*   move fo first child header [n]
- *<localleader>hcl*   move to last child header [n]
- *<localleader>hcn*   move to nth child header (accepts a count) [n]
- *<localleader>nr*    insert a ref definition after this paragraph [n]
- *<localleader>rg*    go to reference definition [n]
- *<localleader>rb*    go back to reference label [n]

For |<localleader>#|, you can decide what header style to use (always atx, use
setex, append hashes at the end) by setting the
|g:pandoc#keyboard#header_style| variable.

Some of these mappings use |mark-motions|. You can configure what mark to use
by setting the value of |g:pandoc#keyboard#mark|, in case the default ("r") is
not suitable or needs to serve a different purpose.

- BIBLIOGRAPHIES                               *vim-pandoc-bibliographies-module*

Note: This module requires python support.

Provides with support for bibliographic info completion and retrieval, and
also populates the |b:pandoc_biblio_bibs| variable, which the |:Pandoc|
command uses to build up the pandoc incantation.

vim-pandoc can handle BibTeX, RIS, MODS and JSON bibliographies.

The way the module populates the b:pandoc_biblio_bibs variable is determined
by the value of the |g:pandoc#biblio#sources| variable. Depending on it, the
module will gather bibliographies on the following orderi (between brackets,
the corresponding flag to give g:pandoc#biblio#sources):

1) [b] Search for any bibliography that shares the name of the current file in the 
   current directory.
   So, if the document is named `paper.mkd`, it will look for `paper.bib`,
   `paper.ris`, and so on.
2) [c] Search for any bibliography in the current dir.
3) [l] Search for default bibliographies (`default.bib`, `default.ris`, etc.) in pandoc's 
    data dir ("$HOME/.pandoc/" in *nix, "%APPDATA%/pandoc/" in Windows)
4) [t] Search for bibliographies in texmf (requires the `kpsewhich` program)
5) [g] Add any bibliographies listed in |g:pandoc#biblio#bibs|.

The default flags are "bcg". You can, of course, modify the value of
|b:pandoc_biblio_bibs| at any time.

The `bibliographies` module also provides the functions that allow the
`completion` module to give suggestions for citation keys (see below). 

By default, this will only return matches for citekeys, but it is possible to
retrieve suggestions that match in any key by using the bibtool program. So,
if you are matching from

    @armstrong

you might retrieve both

    @armstrong1989    Armstrong, David M. - A Combinatorial Theory of Possibility
    @lewis1992        Lewis, David - Armstrong on Combinatorial Possibility

This is off by default, but can be turned on (if `bibtool` is available) by
setting the |g:pandoc#biblio#use_bibtool| variable to 1.


- COMPLETION                                       *vim-pandoc-completion-module*

Provides |omni-completion|. If the `bibliographies` module is active, it will
complete bibliographic references from the bibliographies listed in
|b:pandoc_biblio_bibs|.

To use completion, start typing a citekey, e.g.,

    @geac

and then, while still in insert mode, hit CTRL-X CTRL-O (vim's shortcut
for |omni-completion|), and you'll get a popup window with a list of
matching keys, e.g.,

    @geach1970   Geach, P. T. – Entailment
    @geach1972   Geach, P. T. – Logic Matters

Regular expressions work too:

    @le.*90

should suggest both '@leftow1990' and '@lewis1990', assuming those are
both keys in your bibliography.

Tip: If you only want to complete from a list of citations, you could
create a file (let's say, `citations.dict`) that contains such a list, one
item at a time:

    @adams1967a
    @adams1971
    @adams1972a
    @adams1974
    @adams1977
    @adams1986a

and then add it to vim's |`dictionary`|, like so

    setlocal dictionary="citations.dict"

Then, you can complete from this list by pressing CTRL-X CTRL-K.

- TOC                                                     *vim-pandoc-toc-module*

Provides the *:TOC* command, which displays a table of contents for the
current file using vim's location list system. The position of the TOC window
is configured by the |g:pandoc#toc#position| variable.

When the user presses <CR> (the Enter key) in the TOC buffer, the cursor is
moved in the source window to the position selected. By default, the TOC
buffer is closed after this, but this can be circumvented by pressing <C-CR>.
This behavior can be reversed by setting |g:pandoc#toc#close_after_navigating|
to 0.

- CHDIR                                          *vim-pandoc-chdir-module*

Changes the current window directory to the one the file is in
("%:h"). Enabled by default.

SETTINGS                                                   *vim-pandoc-settings*

Module configuration variables defaults are initialized when the modules
themselves are initialized. This is so the global variable scope is not
cluttered with unused variables for users who have disabled some modules.

A description of the available configuration variables follows:

- *g:pandoc#filetypes#handled*
  default = ["markdown", "rst", "textile"]

  A list of the kinds of files vim-pandoc will attach to. 'extra' includes
  .text and .txt files. For what values are valid here, see the
  pandoc_extensions_table variable in plugin/pandoc.vim

- *g:pandoc#filetypes#pandoc_markdown*
  Default = 1

  Should we set the pandoc filetype (and load vim-pandoc-syntax) for common
  markdown extensions (*.md, *.mkd, etc)? Since regular markdown and pandoc's
  markdown variant differ, someone might want to restrict those extensions to
  regular markdown. In that case, we use vim's default syntax highlighting for
  markdown.

- *g:pandoc#modules#enabled* 

  default = ["formatting", "folding", "bibliographies", "completion",
  "metadata", "menu", "executors", "keyboard", "toc", "chdir"]

  A list of the modules to enable on the files determined by
  |g:pandoc#filetypes#handled|. See |vim-pandoc-modules|.

- *g:pandoc#modules#disabled*

  default = [], (["bibliographies", "command"] in vim < 7.4)

  Auxiliary module blacklist.

- *g:pandoc#formatting#mode*
  default = "s"

	h: use hard wraps
	a: autoformat
	s: use soft wraps

- *g:pandoc#formatting#pandoc_equalprog*
  default = 1

  Use pandoc as the equalprog

- *g:pandoc#command#use_message_buffers*
  default = 1

  Whether to display pandoc's output in a message buffer after execution.

- *g:pandoc#command#latex_engine*
  default = "xelatex"

  The LaTeX engine to use with pandoc. 'xelatex' is the default for greater
  unicode compatibility.

- *g:pandoc#command#custom_open*
  default = ""

  A function to be used to open the created file. This function must take an
  argument, for the path of the file created, and return a string with the
  command that should open the file. For example:

    let g:pandoc#command#custom_open = "MyPandocOpen"

    function! MyPandocOpen(file)
        return "xdg-open ". a:file
    endfunction

- *g:pandoc#command#templates_file*
  default = split(&runtimepath, ",")[0]."/vim-pandoc-templates"

  Where to save and retrieve command templates.

- *g:pandoc#biblio#sources*
  default = "bcg"

  Where to look for bibliographies:

    b: use files with the same name as the current file, in the working dir
    c: use any bibliography in the working dir
    l: look in pandoc's local dir
    t: look in TeX's texmf
    g: append items in |g:pandoc#biblio#bibs|

- *g:pandoc#bib#bib_extensions*
  default = ["bib", "biblatex", "ris", "mods"]

  What bibliography extensions to look for in the working dir for `b` and `c`
  flags in |g:pandoc#biblio#sources|.
  "json" is not included here because it might interfere with other files the
  user can have (we assume the files in `l`, `t` and `g` are safe).

- *g:pandoc#biblio#bibs*
  default = []

  A list of bibliographies to use globally if `g` is in
  |g:pandoc#biblio#sources|.

- *b:pandoc_biblio_bibs*
  default = []

  Extra bibliographies to use for the |:Pandoc| command, local to the buffer.

- *g:pandoc#biblio#use_bibtool*
  default = 0

  Use bibtool for queries, if available (might help performance).

- *g:pandoc#keyboard#mark*
  default = "r"

  What mark to use (i.e, when navigating references, to keep track of original
  position).

- *g:pandoc#keyboard#header_style*
  default = "a"

  What style to use when applying headers. Default is to use atx headers
  everywhere. "s" enables setext headers for level 1 and 2 headers, "2"
  appends atx marks at both ends of the header.

- *g:pandoc#folding#level*
  default = &foldlevel

  The value of |'foldlevel'| for opened files.

- *g:pandoc#folding#mode*
  default = 'syntax'

  How to decide what level the headers are. Default value follows syntax
  rules, 'relative' uses information about the header parents. For example, in
  this document

      ## header

      blah blah

      #### header

      blah blah blah
 
  the level of "## header" is 2 using the default method, but 1 using
  relative, and the level of "#### header" is 4 using the default method, but
  2 using relative.

- *g:pandoc#folding#fold_yaml*
  default = 0

  Fold YAML frontmatters.

- *g:pandoc#folding#fold_div_classes*
  default = ["notes"]

  What div classes to fold. NOTE: you need to end the folds using the
  `foldend` attribute in the closing tag, like so: 
      
      <div class="notes">
      test
      </div foldend>

- *b:pandoc_folding_basic*
  buffer local. default = 0

  When set, forces vim-pandoc to use basic folding in the current buffer.

- *g:pandoc#toc#position*
  default = "right"

  Where to show the TOC window. Can be "top", "left", "right", "bottom".

- *g:pandoc#toc#close_after_navigating*
  default = 1

  Must the TOC window close after selecting a location? This also controls the
  behavior of the <CR> key. If '1', <CR> navigates and closes the TOC, <C-CR>
  simply navigates. If '0', this behavior is reversed.

CONTRIBUTE                                              *vim-pandoc-contribute*

vim-pandoc welcomes any contribution, in the form of bug reports, patches,
code, suggestions, etc. To do so, please open an issue in our issue tracker in
github, at https://github.com/vim-pandoc/vim-pandoc/issues, or email the
maintainer (see below).

WHO                                                            *vim-pandoc-who*

The current vim-pandoc's maintainer is Felipe Morales (fmoralesc), whom you
can reach at hel.sheep@gmail.com

vim-pandoc is the fruit of the labor of a bunch of people. It includes, in one
shape or the other, the work of dsanson, lyokha, jtanguy, tlvince, ehamberg,
blaenk, gokcechan, shelhamer, clvv, PiPeep, mwhite, wunki, ulel, lyeoh, ulel,
felixSchl, zmanji, lmullen, Propatsch, ivotron, tpoisot, 00Davo. We have
borrowed from Jeremy Schultz, plasticboy and cirosantilli, too. Many thanks to
all of them.

vim: set ft=help :
