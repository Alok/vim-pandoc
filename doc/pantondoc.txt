*pantondoc*                                           Last change: 04/11/2013 


	                                            ▎            
	        _   __,   _  _  _▎_  __   _  _    __▎   __   __  
	      ▎/ \_/  ▎  / ▎/ ▎  ▎  /  \_/ ▎/ ▎  /  ▎  /  \_/    
	      ▎__/ \_/▎_/  ▎  ▎_/▎_/\__/   ▎  ▎_/\_/▎_/\__/ \___/
	     /▎              
	     \▎                                                 



vim-pantondoc provides pandoc support for vim (sans syntax highlighting; for
that, use vim-pandoc-syntax). Originally, it was a rewrite of vim-pandoc,
featuring a more modular design. Its design allows for better configurability
and advanced pandoc integration. Its aim is to provide an optimal document
writing experience using vim.

=== CONTENTS === {{{

- INSTALLATION |pantondoc-installation|
- MODULES
    - FORMATTING |pantondoc-formatting-module|
    - FOLDING |pantondoc-folding-module|
    - EXECUTORS |pantondoc-executors-module|
    - MENU |pantondoc-menu-module|
    - MOTIONS |pantondoc-motions-module|
    - BIBLIOGRAPHIES |pantondoc-bibliographies-module|
    - COMPLETION |pantondoc-completion-module|
    - EXTERNALS |pantondoc-externals-module|
- CONFIGURATION
    - SETTINGS |pantondoc-settings|
}}}

=== INSTALLATION === {{{                              *pantondoc-installation*

- Requisites 

vim-pantondoc uses the python API released in vim 7.4. To check if the
dependencies are satisfied, check if

    :echo has("python") && v:version >= 704

outputs "1".

- Using Vundle (recommended)

  Just add

    Plugin 'vim-pandoc/vim-pantondoc'

  to your ~/.vimrc file and run :BundleInstall

The repo is pathogen compatible and you can also just drop it in runtimepath.

- Syntax

vim-pantondoc doesn't bundle a syntax file for pandoc markdown files. Please
use https://github.com/vim-pandoc/vim-pandoc-syntax for this.
}}}

=== MODULES === {{{                                         *pantondoc-modules*

vim-pantondoc is split in several modules. They can be enabled and disabled
independently.

- FORMATTING                                      *pantondoc-formatting-module*

Handles some writing settings, like the use hard or soft line wraps. It is
recommended to leave this module enabled.

The module behavior is configured through the |g:pandoc#formatting#mode|
variable.

- FOLDING                                            *pantondoc-folding-module*

Provides folding support for markdown and textile files.

- COMMAND                                            *pantondoc-command-module*

The command module sets up a buffer-local *:Pandoc* command which handles
pandoc execution. The command builds an incantation for pandoc using
vim-pantondocs configuration and the current state of the buffer
(bibliographies found, etc.).

The syntax of the :Pandoc command is as follows:

    :Pandoc[!] OUTPUT-FORMAT ARGS

Where OUTPUT-FORMAT is the value you would normaly pass to the -t option in
pandoc, and ARGS are auxliary arguments you want to pass pandoc. For example,

    :Pandoc beamer -Vlang:spanish

will create an incantation like:
    
    pandoc -t beamer -Vlang:spanish -o file.pdf file.pdc

Depending on the value of |g:pandoc#command#use_message_buffers|, once pandoc runs
a buffer will open displaying the command output. You can dismiss this buffer
pressing <Esc>.

If you write a bang ('!') after the command, vim-pantondoc will try to open
the created file in its associated program.

The :Pandoc command has argument completion for supported output formats.

NOTE: Previously, vim-pantondoc used the executors system present in
vim-pandoc, which allowed for the execution of command pipelines. This is no
longer supported. If you want to pass the file through a filter, use pandoc's
-F option.

- MENU                                                  *pantondoc-menu-module*

Creates a menu for pandoc handled files. If the `command` module is enabled,
you can build your documents from it.

- KEYBOARD                                            *pantondoc-keyboard-module*

Registers some custom mappings for applying text styles, navigating the
documents and more. Currently, it:

* creates operators to italicize and bold text.
* creates mapping for navigation to and from references (uses the 'r' mark by
  default, configurable with |g:pandoc#keyboard#mark|.

- BIBLIOGRAPHIES                              *pantondoc-bibliographies-module*

Provides with support for bibliographic info completion and retrieval.

- COMPLETION                                      *pantondoc-completion-module*

Provides omni completion. If the 'bibliographies' module is active, it will
complete bibliographic references.

- TOC                                                   *pantondoc-toc-module*

Provides a table of contents markdown files, using vim's quickfix system.
}}}

=== CONFIGURATION === {{{1

SETTINGS                                                   *pantondoc-settings*

- *g:pandoc#filetypes#handled*
  default = ["markdown", "rst", "textile"]

  A list of the kinds of files pantondoc will attach to. 'extra' includes
  .text and .txt files.

- *g:pandoc#filetypes#pandoc_markdown*
  Default = 1

  Should we set the pandoc filetype (and load vim-pandoc-syntax) for common
  markdown extensions (*.md, *.mkd, etc)? Since regular markdown and pandoc's
  markdown variant differ, someone might want to restrict those extensions to
  regular markdown. In that case, we use vim's default syntax highlighting for
  markdown.

- *g:pandoc#modules#enabled* 

  default = ["formatting", "folding", "bibliographies", "completion",
  "metadata", "menu", "executors", "motions"]

  A list of the modules to enable on the files determined by
  |g:pandoc#filetypes#handled|. See |vim-pantondoc-modules|.

- *g:pandoc#modules#disabled*

  default = [], (["bibliographies", "command"] in vim < 7.4)

  Auxiliary module blacklist.

- *g:pandoc#formatting#mode*
  default = "s"

	h: use hard wraps
	a: autoformat
	s: use soft wraps

- *g:pandoc#formatting#pandoc_equalprog*
  default = 1

  Use pandoc as the equalprog

- *g:pandoc#command#use_message_buffers*
  default = 1

  Whether to display pandoc's output in a message buffer after execution.

- *g:pandoc#command#latex_engine*
  default = "xelatex"

  The LaTeX engine to use with pandoc. 'xelatex' is the default for greater
  unicode compatibility.

- *g:pandoc#biblio#sources*
  default = "bcg"

  Where to look for bibliographies:

    b: use files with the same name as the current file, in the working dir
    c: use any bibliograhy in the working dir
    l: look in pandoc's local dir
    t: look in TeX's texmf
    g: append items in *g:pandoc#biblio#bibs*

- *g:pandoc#biblio#use_bibtool*
  default = 0

  Use bibtool for queries, if available (might help performance).

- *g:pandoc#keyboard#mark*
  default = "r"

  What mark to use (i.e, when navigating references, to keep track of original
  position).

- *g:pandoc#keyboard#header_style*
  default = "a"

  What style to use when applying headers. Default is to use atx headers
  everywhere. "s" enables setext headers for level 1 and 2 headers, "2"
  appends atx marks at both ends of the header.

- *g:pandoc#folding#mode*
  default = 'syntax'

  How to decide what level the headers are. Default value follows syntax
  rules, 'relative' uses information about the header parents. For example, in
  this document

      ## header

      blah blah

      #### header

      blah blah blah
 
  the level of "## header" is 2 using the default method, but 1 using
  relative, and the level of "#### header" is 4 using the default method, but
  2 using relative.

- *g:pandoc#folding#fold_yaml*
  default = 0

  Fold YAML frontmatters.

- *g:pandoc#folding#fold_div_classes*
  default = ["notes"]

  What div classes to fold. NOTE: you need to end the folds using the folden
  attribute in the closing tag, like so: 
      
      <div class="notes">
      test
      </div foldend>

- *b:pandoc_folding_basic*
  buffer local. default = 0

  When set, forces vim-pantondoc to use basic folding in the current buffer.

- *g:pandoc#toc#position*
  default = "right"

  Where to show the TOC window. Can be "top", "left", "right", "bottom".


vim: set ft=help fdm=marker :
